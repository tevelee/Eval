{"Typealiases.html#/s:4Eval13VariableValuea":{"name":"VariableValue","abstract":"<p>A tuple with the variable metadata and its value</p>"},"Typealiases.html#/s:4Eval12MatcherBlocka":{"name":"MatcherBlock","abstract":"<p><code>MatcherBlock</code> is used by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code> classes when the matched expression should be processed in a custom way. It should return a strongly typed object after the evaluations."},"Structs/PatternOptions.html#/s:4Eval14PatternOptionsV8rawValueSivp":{"name":"rawValue","abstract":"<p>Integer representation of the option</p>","parent_name":"PatternOptions"},"Structs/PatternOptions.html#/s:4Eval14PatternOptionsVACSi8rawValue_tcfc":{"name":"init(rawValue:)","abstract":"<p>Basic initialiser with the integer representation</p>","parent_name":"PatternOptions"},"Structs/PatternOptions.html#/s:4Eval14PatternOptionsV13backwardMatchACvpZ":{"name":"backwardMatch","abstract":"<p>Searches of the elements of the pattern backward from the end of the output. Othwerise, if not present, it matches from the beginning.</p>","parent_name":"PatternOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV8rawValueSivp":{"name":"rawValue","abstract":"<p>Integer representation of the option</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsVACSi8rawValue_tcfc":{"name":"init(rawValue:)","abstract":"<p>Basic initialiser with the integer representation</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV14notInterpretedACvpZ":{"name":"notInterpreted","abstract":"<p>If set, the value of the recognised placeholder will not be processed. Otherwise, it will be evaluated, using the <code>interpreterForEvaluatingVariables</code> property of the interpreter instance</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV10notTrimmedACvpZ":{"name":"notTrimmed","abstract":"<p>Whether the processed variable should be or not to be trimmed (removing whitespaces from both sides)</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV15exhaustiveMatchACvpZ":{"name":"exhaustiveMatch","abstract":"<p>Provides information whether the match should be exhaustive or just use the shortest possible matching string (even zero characters in some edge cases). This depends on the surrounding <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> instances in the containing collection.</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV15acceptsNilValueACvpZ":{"name":"acceptsNilValue","abstract":"<p>If interpreted and the result of the evaluation is <code>nil</code>, then <code>acceptsNilValue</code> determines if the current match result should be instant noMatch, or <code>nil</code> is an accepted value, so the matching should be continued</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV11interpretedSbvp":{"name":"interpreted","abstract":"<p>In order to avoid double negatives in the source code (e.g. !notInterpreted), this helper checks the lack of .notInterpreted value in the optionset</p>","parent_name":"VariableOptions"},"Structs/VariableOptions.html#/s:4Eval15VariableOptionsV7trimmedSbvp":{"name":"trimmed","abstract":"<p>In order to avoid double negatives in the source code (e.g. !notTrimmed), this helper checks the lack of .notTrimmed value in the optionset</p>","parent_name":"VariableOptions"},"Structs/ExpressionInfo.html#/s:4Eval14ExpressionInfoV5inputSSvp":{"name":"input","abstract":"<p>The raw String input of the expression</p>","parent_name":"ExpressionInfo"},"Structs/ExpressionInfo.html#/s:4Eval14ExpressionInfoV6outputypvp":{"name":"output","abstract":"<p>The generated output of the expression</p>","parent_name":"ExpressionInfo"},"Structs/ExpressionInfo.html#/s:4Eval14ExpressionInfoV7patternSSvp":{"name":"pattern","abstract":"<p>A stringified version of the elements of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> object</p>","parent_name":"ExpressionInfo"},"Structs/ExpressionInfo.html#/s:4Eval14ExpressionInfoV9variabless10DictionaryVySSypGvp":{"name":"variables","abstract":"<p>All the variables computed during the evaluation</p>","parent_name":"ExpressionInfo"},"Structs/ExpressionInfo.html":{"name":"ExpressionInfo","abstract":"<p>Detailed information about recognised expressions</p>"},"Structs/VariableOptions.html":{"name":"VariableOptions","abstract":"<p>Options that modify the behaviour of the variable matching, and the output that the framework provides</p>"},"Structs/PatternOptions.html":{"name":"PatternOptions","abstract":"<p>Options that modify the pattern matching algorithm</p>"},"Protocols/VariableProcessorProtocol.html#/s:4Eval25VariableProcessorProtocolP7processypSgAA0bD0_p8metadata_SS5valuet_tF":{"name":"process(_:)","abstract":"<p>The method that can process the variable</p>","parent_name":"VariableProcessorProtocol"},"Protocols/FunctionProtocol.html#/s:4Eval16FunctionProtocolP7convertypSgSS5input_AA16TypedInterpreterC11interpreterAA7ContextC7contexttF":{"name":"convert(input:interpreter:context:)","abstract":"<p>Functions use similar conversion methods as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s. If they return <code>nil</code>, the function does not apply to the given input. Otherwise, the result is expressed as an instance of a given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>","parent_name":"FunctionProtocol"},"Protocols/DataTypeProtocol.html#/s:4Eval16DataTypeProtocolP7convertypSgSS5input_AA16TypedInterpreterC11interpretertF":{"name":"convert(input:interpreter:)","abstract":"<p>If the framework meets with some static value that hasn&rsquo;t been processed before, it tries to convert it with every registered data type.","parent_name":"DataTypeProtocol"},"Protocols/DataTypeProtocol.html#/s:4Eval16DataTypeProtocolP5printSSSgyp5value_AA7Printer_p7printertF":{"name":"print(value:printer:)","abstract":"<p>This is a convenience method, for debugging and value printing purposes, which can return a string from the current data type.","parent_name":"DataTypeProtocol"},"Protocols/VariableProtocol.html#/s:4Eval16VariableProtocolP4nameSSvp":{"name":"name","abstract":"<p>Unique identifier of the variable that is used when matching and returning them in the matcher.</p>","parent_name":"VariableProtocol"},"Protocols/VariableProtocol.html#/s:4Eval16VariableProtocolP7optionsAA0B7OptionsVvp":{"name":"options","abstract":"<p>Options that modify the behaviour of the variable matching, and the output that the framework provides</p>","parent_name":"VariableProtocol"},"Protocols/VariableProtocol.html#/s:4Eval16VariableProtocolP10performMapypSgyp5input_yp11interpretertF":{"name":"performMap(input:interpreter:)","abstract":"<p>The result of the evaluated variable will be ran through this map function, transforming its value. By default the map tries to convert the matched value to the expected type, using the <code>as?</code> operator.</p>","parent_name":"VariableProtocol"},"Protocols/PatternElement.html#/s:4Eval14PatternElementP7matchesAA11MatchResultOyypGSS6prefix_AA0B7OptionsV7optionstF":{"name":"matches(prefix:options:)","abstract":"<p>Using this method, an element returns how much the String provided in the <code>prefix</code> parameter matches the current element</p>","parent_name":"PatternElement"},"Protocols/Printer.html#/s:4Eval7PrinterP5printSSypF":{"name":"print(_:)","abstract":"<p>Converts its input parameter to a String value</p>","parent_name":"Printer"},"Protocols/Interpreter.html#/s:4Eval11InterpreterP17VariableEvaluator":{"name":"VariableEvaluator","abstract":"<p>The evaluator type to use when interpreting variables</p>","parent_name":"Interpreter"},"Protocols/Interpreter.html#/s:4Eval11InterpreterP7contextAA7ContextCvp":{"name":"context","abstract":"<p>The stored context object for helping evaluation and providing persistency</p>","parent_name":"Interpreter"},"Protocols/Interpreter.html#/s:4Eval11InterpreterP33interpreterForEvaluatingVariables17VariableEvaluatorQzvp":{"name":"interpreterForEvaluatingVariables","abstract":"<p>Sometimes interpreters don&rsquo;t use themselves to evaluate variables by default, maybe a third party, or another contained interpreter. For example, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StringTemplateInterpreter.html\">StringTemplateInterpreter</a></code> class uses <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TypedInterpreter.html\">TypedInterpreter</a></code> instance to evaluate its variables.</p>","parent_name":"Interpreter"},"Protocols/EvaluatorWithLocalContext.html#/s:4Eval25EvaluatorWithLocalContextP8evaluate13EvaluatedTypeQzSS_AA0E0C7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>Evaluates the provided string expression with the help of the context parameter, and returns a strongly typed object</p>","parent_name":"EvaluatorWithLocalContext"},"Protocols/Evaluator.html#/s:4Eval9EvaluatorP13EvaluatedType":{"name":"EvaluatedType","abstract":"<p>The type of the evaluation result</p>","parent_name":"Evaluator"},"Protocols/Evaluator.html#/s:4Eval9EvaluatorP8evaluate13EvaluatedTypeQzSSF":{"name":"evaluate(_:)","abstract":"<p>The only method in <code>Evaluator</code> protocol which does the evaluation of a string expression, and returns a strongly typed object</p>","parent_name":"Evaluator"},"Protocols/Evaluator.html":{"name":"Evaluator","abstract":"<p>A protocol which is capable of evaluating string expressions to a strongly typed object</p>"},"Protocols/EvaluatorWithLocalContext.html":{"name":"EvaluatorWithLocalContext","abstract":"<p>A special kind of evaluator which uses an <code>InterpreterContext</code> instance to evaluate expressions"},"Protocols/Interpreter.html":{"name":"Interpreter","abstract":"<p>The base protocol of interpreters, that are context-aware, and capable of recursively evaluating variables. They use the evaluate method as their main input</p>"},"Protocols/Printer.html":{"name":"Printer","abstract":"<p>A protocol which is able to express custom values as Strings</p>"},"Protocols/PatternElement.html":{"name":"PatternElement","abstract":"<p><code>MatchElement</code>s are used by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> instances to be able to recognise patterns."},"Protocols/VariableProtocol.html":{"name":"VariableProtocol","abstract":"<p>Protocol for all Variables</p>"},"Protocols/DataTypeProtocol.html":{"name":"DataTypeProtocol","abstract":"<p>Data types tell the framework which kind of data can be parsed in the expressions</p>"},"Protocols/FunctionProtocol.html":{"name":"FunctionProtocol","abstract":"<p><code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code>s can process values in given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s, allowing the expressions to be feature-rich</p>"},"Protocols/VariableProcessorProtocol.html":{"name":"VariableProcessorProtocol","abstract":"<p>A processor that can process a raw value with extra information, such as interpreter and context</p>"},"Functions.html#/s:4Eval14matchStatementAA11MatchResultOyxGSayAA7PatternCyxq_GG7amongst_SS2inSi4fromq_11interpreterAA7ContextC7contexttAA11InterpreterR_r0_lF":{"name":"matchStatement(amongst:in:from:interpreter:context:)","abstract":"<p>This is where the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> is able to determine the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/MatchResult.html\">MatchResult</a></code> for a given input inside the provided substring range</p>"},"Functions.html#/s:4Eval1poiSayAA14PatternElement_pGAaC_p_AaC_ptF":{"name":"+(_:_:)","abstract":"<p>Syntactic sugar for <code>MatchElement</code> instances to feel like concatenation, whenever the input requires an array of elements.</p>"},"Functions.html#/s:4Eval1poiSayxGAC_xtlF":{"name":"+(_:_:)","abstract":"<p>Syntactic sugar for appended arrays</p>"},"Functions.html#/s:4Eval2peoiySayxGz_xtlF":{"name":"+=(_:_:)","abstract":"<p>Syntactic sugar for appending mutable arrays</p>"},"Extensions/String.html#/s:SS4EvalEs9CharacterVSicip":{"name":"subscript(_:)","abstract":"<p>Syntactic sugar for Int based string subsription</p>","parent_name":"String"},"Extensions/String.html#/s:SS4EvalEs9SubstringVs14CountableRangeVySiGcip":{"name":"subscript(_:)","abstract":"<p>Syntactic sugar for Int range based string subsription (1&hellip;3)</p>","parent_name":"String"},"Extensions/String.html#/s:SS4EvalEs9SubstringVs16PartialRangeUpToVySiGcip":{"name":"subscript(_:)","abstract":"<p>Syntactic sugar for Int range based string subsription (..&lt;4)</p>","parent_name":"String"},"Extensions/String.html#/s:SS4EvalEs9SubstringVs25CountablePartialRangeFromVySiGcip":{"name":"subscript(_:)","abstract":"<p>Syntactic sugar for Int range based string subsription (1&hellip;)</p>","parent_name":"String"},"Extensions/String.html#/s:SS4EvalE4trimSSyF":{"name":"trim()","abstract":"<p>Shorter syntax for trimming</p>","parent_name":"String"},"Extensions/String.html#/s:SS4EvalE8positionSiSgSS2of_Si4fromtF":{"name":"position(of:from:)","abstract":"<p>Helper to find the next Int based index for a substring, from a given position</p>","parent_name":"String"},"Extensions/String.html":{"name":"String","abstract":"<p>Helpers on <code>String</code> to provide <code>Int</code> based subscription features and easier usage</p>"},"Enums/MatchResult.html#/s:4Eval11MatchResultO02noB0ACyxGAEmlF":{"name":"noMatch","abstract":"<p>The input could not be matched</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO08possibleB0ACyxGAEmlF":{"name":"possibleMatch","abstract":"<p>The input can match, if it were continued. (It&rsquo;s the prefix of the matching expression)</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO05exactB0ACyxGSi6length_x6outputs10DictionaryVySSypG9variablestcAEmlF":{"name":"exactMatch","abstract":"<p>The input matches the expression. It provides information about the <code>length</code> of the matched input, the <code>output</code> after the evaluation, and the <code>variables</code> that were processed during the process.</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO03anyB0ACyxGSb10exhaustive_tcAEmlF":{"name":"anyMatch","abstract":"<p>In case the matching sequence only consists of one variable, the result is going to be anyMatch</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO02isB0SbyF":{"name":"isMatch()","abstract":"<p>Shorter syntax for pattern matching <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/MatchResult.html#/s:4Eval11MatchResultO05exactB0ACyxGSi6length_x6outputs10DictionaryVySSypG9variablestcAEmlF\">MatchResult.exactMatch</a></code></p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO05isAnyB0S2b10exhaustive_tF":{"name":"isAnyMatch(exhaustive:)","abstract":"<p>Shorter syntax for pattern matching <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/MatchResult.html#/s:4Eval11MatchResultO03anyB0ACyxGSb10exhaustive_tcAEmlF\">MatchResult.anyMatch</a></code></p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO04isNoB0SbyF":{"name":"isNoMatch()","abstract":"<p>Shorter syntax for pattern matching <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/MatchResult.html#/s:4Eval11MatchResultO02noB0ACyxGAEmlF\">MatchResult.noMatch</a></code></p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO010isPossibleB0SbyF":{"name":"isPossibleMatch()","abstract":"<p>Shorter syntax for pattern matching <code>MatchResult.anypossibleMatch</code></p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultOAAs9EquatableRzlE2eeoiSbACyxG_AFtFZ":{"name":"==(_:_:)","abstract":"<p><code>MatchResult</code> with Equatable objects are also Equatable</p>","parent_name":"MatchResult"},"Enums/MatchResult.html":{"name":"MatchResult","abstract":"<p>Whenever a match operation is performed, the result is going to be a <code>MatchResult</code> instance.</p>"},"Classes/Pattern.html#/s:4Eval7PatternC8elementsSayAA0B7Element_pGvp":{"name":"elements","abstract":"<p><code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> instances are capable of recognising patterns described in the <code>elements</code> collection. It only remains effective, if the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code> instances are surrounded by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> instances, so no two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>s should be next to each other. Otherwise, their matching result and value would be undefined.","parent_name":"Pattern"},"Classes/Pattern.html#/s:4Eval7PatternC7matcherxSgs10DictionaryVySSypG_q_AA7ContextCtcvp":{"name":"matcher","abstract":"<p>The block to process the elements with</p>","parent_name":"Pattern"},"Classes/Pattern.html#/s:4Eval7PatternC7optionsAA0B7OptionsVvp":{"name":"options","abstract":"<p>Options that modify the pattern matching algorithm</p>","parent_name":"Pattern"},"Classes/Pattern.html#/s:4Eval7PatternCACyxq_GSayAA0B7Element_pG_AA0B7OptionsV7optionsxSgs10DictionaryVySSypG_q_AA7ContextCtc7matchertcfc":{"name":"init(_:options:matcher:)","abstract":"<p>The first parameter is the pattern, that needs to be recognised. The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Pattern.html#/s:4Eval7PatternC7matcherxSgs10DictionaryVySSypG_q_AA7ContextCtcvp\">matcher</a></code> ending closure is called whenever the pattern has successfully been recognised and allows the users of this framework to provide custom computations using the matched <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code> values.</p>","parent_name":"Pattern"},"Classes/Pattern.html#/s:4Eval7PatternC54elementsByReplacingTheLastVariableNotToBeShortestMatchSayAA0B7Element_pGAF2in_AA0B7OptionsV7optionstFZ":{"name":"elementsByReplacingTheLastVariableNotToBeShortestMatch(in:options:)","abstract":"<p>If the last element in the elements pattern is a variable, shortest match will not match until the end of the input string, but just until the first empty character.</p>","parent_name":"Pattern"},"Classes/Pattern.html#/s:4Eval7PatternC7matchesAA11MatchResultOyxGSS6string_Si4fromq_11interpreterAA7ContextC7contexttF":{"name":"matches(string:from:interpreter:context:)","abstract":"<p>This matcher provides the main logic of the <code>Eval</code> framework, performing the pattern matching, trying to identify, whether the input string is somehow related, or completely matches the pattern of the <code>Pattern</code> instance.","parent_name":"Pattern"},"Classes/Pattern.html#/s:4Eval7PatternC7patternSSyF":{"name":"pattern()","abstract":"<p>A textual representation of the elements array</p>","parent_name":"Pattern"},"Classes/Matcher.html#/s:4Eval7MatcherC8elementsSayAA14PatternElement_pGvp":{"name":"elements","abstract":"<p>The elements in the pattern</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherC9processorAA25VariableProcessorProtocol_pvp":{"name":"processor","abstract":"<p>A processor that is able to evaluate the variables with extra information, such as context and interpreter</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherC7optionsAA14PatternOptionsVvp":{"name":"options","abstract":"<p>Options for configuring the behaviour of the algorithm</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherCACSayAA14PatternElement_pG8elements_AA25VariableProcessorProtocol_p9processorAA0C7OptionsV7optionstcfc":{"name":"init(elements:processor:options:)","abstract":"<p>Initialiser of the matcher</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherC5matchAA11MatchResultOyxGSS6string_Si4fromxSgs10DictionaryVySSypGc8renderertlF":{"name":"match(string:from:renderer:)","abstract":"<p>This match method provides the main logic of the <code>Eval</code> framework, performing the pattern matching, trying to identify, whether the input string is somehow related, or completely matches the pattern.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherC10isEmbeddedSbAA14PatternElement_p7element_SS2inSi2attF":{"name":"isEmbedded(element:in:at:)","abstract":"<p>Determines whether the current character is an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/OpenKeyword.html\">OpenKeyword</a></code>, so there might be another embedded match later</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherC20positionOfClosingTagSiSgSS2in_Si4fromtF":{"name":"positionOfClosingTag(in:from:)","abstract":"<p>Determines whether the current character is an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/OpenKeyword.html\">OpenKeyword</a></code> and fins the position of its appropriate <code>ClosingKeyword</code> pair</p>","parent_name":"Matcher"},"Classes/VariableProcessor.html#/s:4Eval17VariableProcessorC11interpreterxvp":{"name":"interpreter","abstract":"<p>An interpreter instance to use during the processing</p>","parent_name":"VariableProcessor"},"Classes/VariableProcessor.html#/s:4Eval17VariableProcessorC7contextAA7ContextCvp":{"name":"context","abstract":"<p>The context to use during the processing</p>","parent_name":"VariableProcessor"},"Classes/VariableProcessor.html#/s:4Eval17VariableProcessorCACyxGx11interpreter_AA7ContextC7contexttcfc":{"name":"init(interpreter:context:)","abstract":"<p>Initialiser of the processor</p>","parent_name":"VariableProcessor"},"Classes/VariableProcessor.html#/s:4Eval17VariableProcessorC7processypSgAA0B8Protocol_p8metadata_SS5valuet_tF":{"name":"process(_:)","abstract":"<p>Maps and evaluates variable content, based on its interpretation settings</p>","parent_name":"VariableProcessor"},"Classes/Function.html#/s:4Eval8FunctionC8patternsSayAA7PatternCyxAA16TypedInterpreterCGGvp":{"name":"patterns","abstract":"<p>Although <code>Function</code>s typically contain only one pattern, multiple ones can be added, for semantic grouping purposes</p>","parent_name":"Function"},"Classes/Function.html#/s:4Eval8FunctionCACyxGSayAA7PatternCyxAA16TypedInterpreterCGG8patterns_tcfc":{"name":"init(patterns:)","abstract":"<p>If multiple patterns are provided use this initialiser. Otherwise, for only one, there is <code>init(_,matcher:)</code></p>","parent_name":"Function"},"Classes/Function.html#/s:4Eval8FunctionCACyxGSayAA14PatternElement_pG_AA0C7OptionsV7optionsxSgs10DictionaryVySSypG_AA16TypedInterpreterCAA7ContextCtc7matchertcfc":{"name":"init(_:options:matcher:)","abstract":"<p>In case there is only one pattern, this initialiser is the preferred one to use</p>","parent_name":"Function"},"Classes/Function.html#/s:4Eval8FunctionC7convertypSgSS5input_AA16TypedInterpreterC11interpreterAA7ContextC7contexttF":{"name":"convert(input:interpreter:context:)","abstract":"<p>The matching of the input expression of a given <code>Function</code> happens in this method. It only accepts matches from the matcher, that are exact matches.</p>","parent_name":"Function"},"Classes/Literal.html#/s:4Eval7LiteralC7convertxSgSS_AA16TypedInterpreterCtcvp":{"name":"convert","abstract":"<p>For the conversion it uses the registered literals, to be able to process the input and return an existing type</p>","parent_name":"Literal"},"Classes/Literal.html#/s:4Eval7LiteralCACyxGxSgSS_AA16TypedInterpreterCtc7convert_tcfc":{"name":"init(convert:)","abstract":"<p>In case of more complicated expression, this initialiser accepts a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Literal.html#/s:4Eval7LiteralC7convertxSgSS_AA16TypedInterpreterCtcvp\">convert</a></code> block, which can be used to process any value. Return nil, if the input cannot be accepted and converted.</p>","parent_name":"Literal"},"Classes/Literal.html#/s:4Eval7LiteralCACyxGSS_xyXK10convertsTotcfc":{"name":"init(_:convertsTo:)","abstract":"<p>In case the literals are easily expressed, static keywords, then this initialiser is the best to use.</p>","parent_name":"Literal"},"Classes/Literal.html#/s:4Eval7LiteralC7convertxSgSS5input_AA16TypedInterpreterC11interpretertF":{"name":"convert(input:interpreter:)","abstract":"<p>For the conversion it uses the registered literals, to be able to process the input and return an existing type</p>","parent_name":"Literal"},"Classes/DataType.html#/s:4Eval8DataTypeC4typexmvp":{"name":"type","abstract":"<p>The existing type to map to an internal one</p>","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeC8literalsSayAA7LiteralCyxGGvp":{"name":"literals","abstract":"<p>Array of literals that tell the framework how to transform certain types to an internal <code>DataType</code> representation</p>","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeC5printSSx_AA7Printer_ptcvp":{"name":"print","abstract":"<p>A method to convert an internal representation to strings - for debugging and output representation purposes</p>","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeCACyxGxm4type_SayAA7LiteralCyxGG8literalsSSx_AA7Printer_ptc5printtcfc":{"name":"init(type:literals:print:)","abstract":"<p>To be able to bridge the outside world effectively, it needs to provide an already existing Swift or user-defined type. This can be class, struct, enum, or anything else, for example, block or function (which is not recommended).","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeC7convertypSgSS5input_AA16TypedInterpreterC11interpretertF":{"name":"convert(input:interpreter:)","abstract":"<p>For the conversion it uses the registered literals, to be able to process the input and return an existing type</p>","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeC5printSSSgyp5value_AA7Printer_p7printertF":{"name":"print(value:printer:)","abstract":"<p>This is a convenience method, for debugging and value printing purposes, which can return a string from the current data type.","parent_name":"DataType"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC13EvaluatedTypea":{"name":"EvaluatedType","abstract":"<p>The result is a strongly typed value or <code>nil</code> (if it cannot be properly processed)</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC7contextAA7ContextCvp":{"name":"context","abstract":"<p>The global context used for every evaluation with this instance</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC33interpreterForEvaluatingVariablesACvp":{"name":"interpreterForEvaluatingVariables","abstract":"<p>The interpreter used for evaluating variable values. In case of the <code>TypedInterpreter</code>, it&rsquo;s itself</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC9dataTypesSayAA16DataTypeProtocol_pGvp":{"name":"dataTypes","abstract":"<p>The data types that the expression is capable of recognise</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC9functionsSayAA16FunctionProtocol_pGvp":{"name":"functions","abstract":"<p>The list of functions that are available during the evaluation to process the recognised data types</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC13functionCaches10DictionaryVySSAA16FunctionProtocol_pGvp":{"name":"functionCache","abstract":"<p>A cache of functions where expressions have matched before. This improves the performance a lot, when computing already established functions</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC13dataTypeCaches10DictionaryVySSAA04DataE8Protocol_pGvp":{"name":"dataTypeCache","abstract":"<p>A cache of data types where expressions have matched before. This improves the performance a lot, when computing already established data types</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterCACSayAA16DataTypeProtocol_pG9dataTypes_SayAA08FunctionF0_pG9functionsAA7ContextC7contexttcfc":{"name":"init(dataTypes:functions:context:)","abstract":"<p>Each item of the input list (data types, functions and the context) is optional, but strongly recommended to provide them. It&rsquo;s usual that for every data type, there are a few functions provided, so the list can occasionally be pretty long.</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8evaluateypSgSSF":{"name":"evaluate(_:)","abstract":"<p>The evaluation method, that produces the strongly typed results. In this case, only the globally available context can be used</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8evaluateypSgSS_AA7ContextC7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>The evaluation method, that produces the strongly typed results. In this case, only the context is a result of merging the global context and the one provided in the parameter</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC17functionFromCacheypSgSS3for_AA7ContextC5usingtF":{"name":"functionFromCache(for:using:)","abstract":"<p>If the expression belongs to a cached function, it uses the function converter to evaluate it</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC17dataTypeFromCacheypSgSS3for_tF":{"name":"dataTypeFromCache(for:)","abstract":"<p>If the expression belongs to a cached data type, it uses the data type converter to evaluate it</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8functionypSgSS3for_AA7ContextC5usingtF":{"name":"function(for:using:)","abstract":"<p>If the expression is recognised as a function, it uses that function to evaluate the value</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8dataTypeypSgSS3for_tF":{"name":"dataType(for:)","abstract":"<p>If the expression is recognised as a data type, it uses that data type to convert its value</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8variableypSgSS3for_AA7ContextC5usingtF":{"name":"variable(for:using:)","abstract":"<p>If the expression is recognised as a variable, it uses that variable to replace its value</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC5printSSypF":{"name":"print(_:)","abstract":"<p>A helper to be able to effectively print any result, coming out of the evaluation. The <code>print</code> method recognises the used data type and uses its string conversion block</p>","parent_name":"TypedInterpreter"},"Classes/TemplateVariable.html#/s:4Eval16TemplateVariableCACSS_AA0C7OptionsV7optionsSSSgyp_AA06StringB11InterpreterCtc3maptcfc":{"name":"init(_:options:map:)","abstract":"<p>No changes compared to the initialiser of the superclass <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>, uses the same parameters</p>","parent_name":"TemplateVariable"},"Classes/StringTemplateInterpreter.html#/s:4Eval25StringTemplateInterpreterC13EvaluatedTypea":{"name":"EvaluatedType","abstract":"<p>The result of a template evaluation is a String</p>","parent_name":"StringTemplateInterpreter"},"Classes/StringTemplateInterpreter.html#/s:4Eval25StringTemplateInterpreterC8evaluateS2S_AA7ContextC7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>The main part of the evaluation happens here. In this case, the global context variables merged with the provided context are going to be used.</p>","parent_name":"StringTemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC10statementsSayAA7PatternCyxACyxGGGvp":{"name":"statements","abstract":"<p>The statements (patterns) registered to the interpreter. If found, these are going to be processed and replaced with the evaluated value</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC7contextAA7ContextCvp":{"name":"context","abstract":"<p>The context used when evaluating the expressions. These context variables are global, used in every evaluation processed with this instance.</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC05typedC0AA05TypedC0Cvp":{"name":"typedInterpreter","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StringTemplateInterpreter.html\">StringTemplateInterpreter</a></code> contains a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TypedInterpreter.html\">TypedInterpreter</a></code>, as it is quite common practice to evaluate strongly typed expression as s support for the template language.","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC17VariableEvaluatora":{"name":"VariableEvaluator","abstract":"<p>The evaluator type that is being used to process variables. By default, the TypedInterpreter is being used</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC13EvaluatedTypea":{"name":"EvaluatedType","abstract":"<p>The result type of a template evaluation</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC33interpreterForEvaluatingVariablesAA05TypedC0Cvp":{"name":"interpreterForEvaluatingVariables","abstract":"<p>The evaluator, that is being used to process variables</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterCACyxGSayAA7PatternCyxADGG10statements_AA05TypedC0C11interpreterAA7ContextC7contexttcfc":{"name":"init(statements:interpreter:context:)","abstract":"<p>The statements, and context parameters are optional, but highly recommended to use with actual values.","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC8evaluatexSSF":{"name":"evaluate(_:)","abstract":"<p>The main part of the evaluation happens here. In this case, only the global context variables are going to be used</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC8evaluatexSS_AA7ContextC7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>The main part of the evaluation happens here. In this case, the global context variables merged with the provided context are going to be used.</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC7Reducera":{"name":"Reducer","abstract":"<p>Reduce block can convet a stream of values into one, by calling this block for every element, returning a single value at the end. The concept is usually used in functional environments</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC0B7Reducera":{"name":"TemplateReducer","abstract":"<p>In order to support generic types, not just plain String objects, a reducer helps to convert the output to the dedicated output type</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC8evaluatexSS_AA7ContextC7contextx12initialValue_xx_xtc06reduceH0xx_s9CharacterVtc0iJ0t7reducertF":{"name":"evaluate(_:context:reducer:)","abstract":"<p>The main part of the evaluation happens here. In this case, the global context variables merged with the provided context are going to be used.</p>","parent_name":"TemplateInterpreter"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC0C6Mappera":{"name":"VariableMapper","abstract":"<p>Maps and validates the variable value to another</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC4nameSSvp":{"name":"name","abstract":"<p>Unique identifier of the variable that is used when matching and returning them in the matcher.</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC7optionsAA0C7OptionsVvp":{"name":"options","abstract":"<p>Options that modify the behaviour of the variable matching, and the output that the framework provides</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC3mapxSgyp_q_tcvp":{"name":"map","abstract":"<p>The result of the evaluated variable will be running through this map function, transforming its value. By default the map tries to convert the matched value to the expected type, using the <code>as?</code> operator.</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableCACyxq_GSS_AA0C7OptionsV7optionsxSgyp_q_tc3maptcfc":{"name":"init(_:options:map:)","abstract":"<p>Initialiser for all the properties</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC7matchesAA11MatchResultOyypGSS6prefix_AA14PatternOptionsV7optionstF":{"name":"matches(prefix:options:)","abstract":"<p><code>GenericVariables</code> always return anyMatch MatchResult, forwarding the shortest argument, provided during initialisation</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC6mappedACyqd__q_Gqd__SgxclF":{"name":"mapped(_:)","abstract":"<p>A helper method to map the value of the current variable to another type</p>","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC10performMapypSgyp5input_yp11interpretertF":{"name":"performMap(input:interpreter:)","abstract":"<p>The result of the evaluated variable will be ran through this map function, transforming its value. By default the map tries to convert the matched value to the expected type, using the <code>as?</code> operator.</p>","parent_name":"GenericVariable"},"Classes/CloseKeyword.html#/s:4Eval12CloseKeywordCACSScfc":{"name":"init(_:)","abstract":"<p>The initialiser uses the closing type, but the <code>name</code> still must be provided</p>","parent_name":"CloseKeyword"},"Classes/OpenKeyword.html#/s:4Eval11OpenKeywordCACSScfc":{"name":"init(_:)","abstract":"<p>The initialiser uses the opening type, but the <code>name</code> still must be provided</p>","parent_name":"OpenKeyword"},"Classes/Keyword/KeywordType.html#/s:4Eval7KeywordC0B4TypeO7genericA2EmF":{"name":"generic","abstract":"<p>By default, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> is created as a generic type, meaning, that there is no special requirement, that they need to fulfil</p>","parent_name":"KeywordType"},"Classes/Keyword/KeywordType.html#/s:4Eval7KeywordC0B4TypeO16openingStatementA2EmF":{"name":"openingStatement","abstract":"<p>If a pattern contains two, semantically paired <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code>s, they often represent opening and closing parentheses or any special enclosing characters.","parent_name":"KeywordType"},"Classes/Keyword/KeywordType.html#/s:4Eval7KeywordC0B4TypeO16closingStatementA2EmF":{"name":"closingStatement","abstract":"<p>If a pattern contains two, semantically paired <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code>s, they often represent opening and closing parentheses or any special enclosing characters.","parent_name":"KeywordType"},"Classes/Keyword/KeywordType.html":{"name":"KeywordType","abstract":"<p>The type of the Keyword determines whether the item holds some special purpose, or it&rsquo;s just an ordinary static String</p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordC4nameSSvp":{"name":"name","abstract":"<p>Name (and value) of the <code>Keyword</code></p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordC4typeAC0B4TypeOvp":{"name":"type","abstract":"<p>Type of the keyword, which gives the framework some extra semantics about its nature</p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordCACSS_AC0B4TypeO4typetcfc":{"name":"init(_:type:)","abstract":"<p><code>Keyword</code> initialiser</p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordC7matchesAA11MatchResultOyypGSS6prefix_AA14PatternOptionsV7optionstF":{"name":"matches(prefix:options:)","abstract":"<p><code>Keyword</code> instances are returning exactMatch, when they are equal to the <code>prefix</code> input.","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordC2eeoiSbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p><code>Keyword</code> instances are <code>Equatable</code>s</p>","parent_name":"Keyword"},"Classes/Context.html#/s:4Eval7ContextC9variabless10DictionaryVySSypGvp":{"name":"variables","abstract":"<p>The stored variables</p>","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextC9debugInfos10DictionaryVySSAA010ExpressionD0VGvp":{"name":"debugInfo","abstract":"<p>Debug information for recognised patterns</p>","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextC5stackSays10DictionaryVySSypG9variables_AFySSAA14ExpressionInfoVG05debugG0tGvp":{"name":"stack","abstract":"<p>Context can behave as a stack. If <code>push</code> is called, it saves a snapshot of the current state of variables to a stack and lets you modify the content, while the previous values are stored, safely.","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextCACs10DictionaryVySSypG9variables_tcfc":{"name":"init(variables:)","abstract":"<p>Users of the context may optionally provide an initial set of variables</p>","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextC4pushyyF":{"name":"push()","abstract":"<p>Context can behave as a stack. If <code>push</code> is called, it saves a snapshot of the current state of variables to a stack and lets you modify the content, while the previous values are stored, safely.","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextC3popyyF":{"name":"pop()","abstract":"<p>Context can behave as a stack. If <code>push</code> is called, it saves a snapshot of the current state of variables to a stack and lets you modify the content, while the previous values are stored, safely.","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextC7mergingA2CSg4with_tF":{"name":"merging(with:)","abstract":"<p>Creates a new context instance by merging their variable dictionaries. The one in the parameter overrides the duplicated items of the existing one</p>","parent_name":"Context"},"Classes/Context.html#/s:4Eval7ContextC5mergeyACSg4with_ypyp_yptKcADtF":{"name":"merge(with:merge:)","abstract":"<p>Modifies the current context instance by merging its variable dictionary with the parameter. The one in the parameter overrides the duplicated items of the existing one</p>","parent_name":"Context"},"Classes/Context.html":{"name":"Context","abstract":"<p>The only responsibility of the <code>InterpreterContext</code> class is to store variables, and keep them during the execution, where multiple expressions might use the same set of variables.</p>"},"Classes/Keyword.html":{"name":"Keyword","abstract":"<p><code>Keyword</code> instances are used to provide static points in match sequences so that they can be used as pillars of the expressions the developer tries to match</p>"},"Classes/OpenKeyword.html":{"name":"OpenKeyword","abstract":"<p>A special subclass of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> class, which initialises a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> with an opening type."},"Classes/CloseKeyword.html":{"name":"CloseKeyword","abstract":"<p>A special subclass of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> class, which initialises a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> with an closing type."},"Classes/GenericVariable.html":{"name":"GenericVariable","abstract":"<p>Generic superclass of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>s which are aware of their <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Interpreter.html\">Interpreter</a></code> classes,"},"Classes/TemplateInterpreter.html":{"name":"TemplateInterpreter","abstract":"<p>This interpreter is used to evaluate string expressions and return a transformed string, replacing the content where it matches certain patterns."},"Classes/StringTemplateInterpreter.html":{"name":"StringTemplateInterpreter","abstract":"<p>This interpreter is used to evaluate string expressions and return a transformed string, replacing the content where it matches certain patterns."},"Classes/TemplateVariable.html":{"name":"TemplateVariable","abstract":"<p>A special kind of variable that is used in case of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StringTemplateInterpreter.html\">StringTemplateInterpreter</a></code>s. It does not convert its content using the <code>interpreterForEvaluatingVariables</code> but always uses the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StringTemplateInterpreter.html\">StringTemplateInterpreter</a></code> instance."},"Classes/TypedInterpreter.html":{"name":"TypedInterpreter","abstract":"<p>A type of interpreter implementation that is capable of evaluating arbitrary string expressions to strongly typed variables</p>"},"Classes/DataType.html":{"name":"DataType","abstract":"<p>The implementation of a <code>DataType</code> uses the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/DataTypeProtocol.html\">DataTypeProtocol</a></code> to convert input to a strongly typed data and print it if needed</p>"},"Classes/Literal.html":{"name":"Literal","abstract":"<p><code>Literal</code>s are used by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s to be able to recognise static values, that can be expressed as a given type</p>"},"Classes/Function.html":{"name":"Function","abstract":"<p><code>Function</code>s can process values in given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s, allowing the expressions to be feature-rich</p>"},"Classes.html#/s:4Eval8VariableC":{"name":"Variable","abstract":"<p><code>Variable</code> represents a named placeholder, so when the matcher recognises a pattern, the values of the variables are passed to them in a block.</p>"},"Classes/VariableProcessor.html":{"name":"VariableProcessor","abstract":"<p>A processor that can process a raw value with extra information, such as interpreter and context</p>"},"Classes/Matcher.html":{"name":"Matcher","abstract":"<p>This class provides the main logic of the <code>Eval</code> framework, performing the pattern matching details</p>"},"Classes/Pattern.html":{"name":"Pattern","abstract":"<p>Matchers are the heart of the Eval framework, providing pattern matching capabilities to the library.</p>"},"example-projects.html":{"name":"Example projects"},"interpreter-engine-details.html":{"name":"Interpreter engine details"},"strongly-typed-evaluator.html":{"name":"Strongly-typed evaluator"},"template-evaluator.html":{"name":"Template evaluator"},"tips--tricks.html":{"name":"Tips & Tricks"},"Guides.html":{"name":"Guides","abstract":"<p>The following guides are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}